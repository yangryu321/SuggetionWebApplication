@page "/"
@using SuggestionAppLibrary.Models
@using SuggestionAppLibrary.DataAccess
@using SuggestionWebApplication.Helpers


@inject IUserData userData
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject IStatusData statusData
@inject AuthenticationStateProvider authProvider
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navManager

@*<h1 class="page-heading text-uppercase mb-4">
    SF6 Wishlist
</h1>*@

<div class="suggestion-container">
    <button @onclick="LoadCreatePage" class="btn btn-main btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
    <div class="suggestion-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))"> Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="text" placeholder="Search" aria-label="Search box" class="form-control rounded-control"
               @oninput="((txt) => OnsearchInPut((string)txt.Value))" />
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div class="suggestion-entry">
                    <div class="@GetVoteClass(s)" @onclick="(() => Upvote(s))">
                        <div class="text-uppercase">@GetupVoteTopText(s)</div>
                        <span class="oi oi-caret-top" style="font-size: 3rem;"></span>
                        <div class="text-uppercase">@GetupVoteBottomText(s)</div>
                    </div>
                    <div class="suggestion-entry-text">
                        <div class="suggestion-entry-text-title" @onclick="(() => OpenDetails(s))">
                            Suggestion: @s.Suggestion
                        </div>
                        <div class="suggestion-entry-text-category" @onclick="(() => OpenDetails(s))">
                            Catogory: @s.Category?.CategoryName
                        </div>
                    </div>
                    <div class="suggestion-entry-status @GetSuggestionStatusClass(s)">
                        <div class="suggestion-entry-status-text">
                            @if (s.SuggestionStatus is not null)
                            {
                                @s.SuggestionStatus.StatusName;
                            }
                            else
                            {
                                @none;
                            }

                        </div>

                    </div>
                </div>
            </Virtualize>
        }

    </div>


    <div class="col-md-4 col-xl-3">
        @if (categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">
                    CATEGORY
                </span>
                <div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">All</div>
                @foreach (var c in categories)
                {
                    <div class="@GetSelectedCategory(c.CategoryName)" @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>

                }
            </div>


        }

        @if (statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">
                    STATUS
                </span>
                <div class="@GetSelectedStatus()" @onclick="(() => OnStatusClick())">All</div>
                @foreach (var s in statuses)
                {
                    <div class="@GetSelectedStatus(s.StatusName)" @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>

                }
            </div>

        }
    </div>

</div>





@code
{

    private List<SuggestionModel> suggestions = new List<SuggestionModel>();
    private List<CategoryModel> categories = new List<CategoryModel>();
    private List<StatusModel> statuses = new List<StatusModel>();
    private UserModel loggedInUser = new UserModel();
    private string none = "none";

    //for filtering
    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {

        statuses = await statusData.GetAllStatuses();
        categories = await categoryData.GetAllCategories();
        await LoadAndVerifyUser();

    }


    //it will run after the page is rendered
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();

        }

    }



    private async Task LoadFilterState()
    {
        //get the category from seesion storage
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        //get the status from session storage
        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        //get the text from session storage
        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        //get the value of isSorted from session storage
        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }


    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }


    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllAprrovedSuggestions();


        //first filter by selectedCategory got from session storage
        if (selectedCategory != "All")
        {
            output = output.Where(x => x.Category?.CategoryName == selectedCategory).ToList();

        }

        //filter by selectedStatus
        if (selectedStatus != "All")
        {
            output = output.Where(x => x.SuggestionStatus?.StatusName == selectedStatus).ToList();

        }

        //filter by searchText on suggesions and description
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(x => x.Suggestion.Contains(
                searchText, StringComparison.InvariantCultureIgnoreCase) ||
                x.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();

        }

        //filter by IsSortedByNew
        if (isSortedByNew)
        {
            output = output.OrderByDescending(x => x.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(x => x.UserVotes.Count).ThenByDescending(x => x.DateCreated).ToList();
        }

        suggestions = output;

        await SaveFilterState();

    }

    //verify and creat user in database
    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("objectidentifier"))?.Value;

        if (string.IsNullOrEmpty(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

            string firstName = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(x => x.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("email"))?.Value;

            bool isDirty = false;

            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }

            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if (isDirty)
            {

                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }


        }





    }


    //Creat methods to bind to buttons

    //bind to OrderByNew button
    private async Task OrderByNew(bool sorting)
    {
        //stuff to do
        //set a value to isSortedByNew

        isSortedByNew = sorting;

        //filter the suggestions by isSortedBynew
        await FilterSuggestions();

    }

    //Bind to search button
    private async Task OnsearchInPut(string input)
    {
        searchText = input;

        await FilterSuggestions();

    }

    //bind to Category button
    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();

    }

    //bind to Status button
    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();

    }



    //bind to upvote text above
    private string GetupVoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (!string.IsNullOrEmpty(loggedInUser.Id))
            {
                if (suggestion.Author.Id == loggedInUser.Id)
                {
                    return "Awaiting";
                }
                else
                {
                    return "Click to";
                }
            }
            else
            {
                return "Click to";
            }
        }

    }

    //bind to upvote text below
    private string GetupVoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }


    private async Task Upvote(SuggestionModel suggestion)
    {
        //suggestion.UserVotes.Add(loggedInUser.Id);
        //await suggestionData.UpdateSuggestion(suggestion);

        //loggedInUser.VotedOnSuggestions.Add(new BasicSuggestionModel(suggestion));
        //await userData.UpdateUser(loggedInUser);

        if (!string.IsNullOrEmpty(loggedInUser.Id))
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return;
                //suggestion.NumberOfVotes = (await suggestionData.GetSuggestion(suggestion.Id)).UserVotes.Count;
            }

            //Update suggesiton locally, has nothting to do with database
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpVoteSuggestions(suggestion.Id, loggedInUser.Id);
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }


    private void LoadCreatePage()
    {
        if (loggedInUser.Id is not null)
        {
            navManager.NavigateTo("/Create");
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }


    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "sort-selected";

        }
        else
        {
            return "";

        }

    }

    private string GetVoteClass(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-entry-no-votes";

        }

        if (suggestion.UserVotes.Contains(loggedInUser.Id))
        {
            return "suggestion-entry-voted";
        }
        else
        {
            return "suggestion-entry-not-voted";
        }


    }

    private string GetSuggestionStatusClass(SuggestionModel suggestion)
    {
        if (suggestion is null || suggestion.SuggestionStatus is null)
            return "suggestion-entry-status-none";


        string output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-entry-completed",
            "Watching" => "suggestion-entry-status-watching",
            "Upcoming" => "suggestion-entry-status-upcoming",
            "Dismissed" => "suggestion-entry-status-dismissed",
            _ => "suggestion-entry-status-none",

        };

        return output;


    }

    private string GetSelectedCategory(string category = "All")
    {
        if (selectedCategory == category)
        {
            return "selected-category";
        }
        else
        {
            return "";
        }
    }

    private string GetSelectedStatus(string status = "All")
    {
        if (selectedStatus== status)
        {
            return "selected-status";
        }
        else
        {
            return "";
        }
    }



}