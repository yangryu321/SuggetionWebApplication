@page "/Profile"
@attribute [Authorize]
@using SuggestionAppLibrary.DataAccess
@using SuggestionAppLibrary.Models
@using SuggestionWebApplication.Helpers

@inject IUserData userData
@inject ISuggestionData suggesitonData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

<h1 class="mt-lg-5">
    Myprofile
</h1>


<div class="row">
    <div class="col-12 close-button-section">
        <button type="button" class="close" aria-label="Close" @onclick="ClosePage">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>


<div class="form-layout mb-3">
    <h2 class="my-submission-heading">
        My account
    </h2>
    <p class="my-submission-text">
        <a class="edit-profile-color" href="MicrosoftIdentity/Account/EditProfile">
            Edit My Profile
        </a>
    </p>
</div>




@if (approved is not null && approved.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">
            Approved Suggesitons
        </h2>

        <p class="my-submission-text">
            There are your suggestions that are currently active
        </p>

        @foreach (var s in approved)
        {
            <hr class="my-submission-separator" />
            <div class="font-weight-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submisson-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes:@s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="font-weight-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>

            }
        }
    </div>


}

@if (archived is not null && archived.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">
            Archived Suggesitons
        </h2>

        <p class="my-submission-text">
            There are your suggestions that are currently archived
        </p>

        @foreach (var s in archived)
        {

            <hr class="my-submission-separator" />
            <div class="font-weight-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submisson-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes:@s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="font-weight-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>

            }
        }
    </div>


}

@if (pending is not null && pending.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">
            Pending Suggesitons
        </h2>

        <p class="my-submission-text">
            There are your suggestions that are currently pending
        </p>

        @foreach (var s in pending)
        {

            <hr class="my-submission-separator" />
            <div class="font-weight-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submisson-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes:@s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="font-weight-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>

            }
        }
    </div>


}

@if (rejected is not null && rejected.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">
            Rejected Suggesitons
        </h2>

        <p class="my-submission-text">
            There are your suggestions that are currently rejected
        </p>

        @foreach (var s in rejected)
        {

            <hr class="my-submission-separator" />
            <div class="font-weight-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submisson-text">
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p class="my-submission-text">
                Total Votes:@s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="font-weight-bold suggestion-detail-suggestion">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>

            }
        }
    </div>


}






@code {

    private UserModel loggedInUser = new UserModel();

    private List<SuggestionModel> submissions = new List<SuggestionModel>();
    private List<SuggestionModel> approved = new List<SuggestionModel>();
    private List<SuggestionModel> archived = new List<SuggestionModel>();
    private List<SuggestionModel> pending = new List<SuggestionModel>();
    private List<SuggestionModel> rejected = new List<SuggestionModel>();


    protected async override Task OnInitializedAsync()
    {

        //var authState = await authProvider.GetAuthenticationStateAsync();
        //string objectId = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("objectidentifier"))?.Value;
        //loggedInUser = await userData.GetUserFromAuthentication(objectId);

        var loggedInUser = await authProvider.GetUserFromAuth(userData);



        if (loggedInUser != null)
        {

            var result = await suggesitonData.GetSuggestionsByUser(loggedInUser.Id);


            submissions = result.OrderByDescending(x => x.DateCreated).ToList();
            approved = submissions.Where(x => x.ApprovedForRelease == true && x.Archived == false && x.Rejected == false).ToList();
            archived = submissions.Where(x => x.ApprovedForRelease == false && x.Archived == true && x.Rejected == false).ToList();
            pending = submissions.Where(x => x.Rejected == false && x.ApprovedForRelease == false).ToList();
            rejected = submissions.Where(x => x.Rejected == true).ToList();

        }


    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

}
