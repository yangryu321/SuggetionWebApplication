@page "/Create"
@attribute [Authorize]
@using SuggestionAppLibrary.DataAccess
@using SuggestionAppLibrary.Models
@using SuggestionWebApplication.Models
@using SuggestionWebApplication.Components
@using SuggestionWebApplication.Helpers
@inject ISuggestionData suggestionData
@inject ICategoryData categoryData
@inject IUserData userData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider




<div class="row justify-content-center create-form mt-lg-5" >
    <div class="col-xl-8 col-lg-10 form-layout">
        <div class="close-button-section">
            <button type="button" class="close" aria-label="Close" @onclick="ClosePage">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div>
            @if (categories is not null)
            {
                <EditForm Model="suggestion" OnInvalidSubmit="CreateSuggestion">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-section">
                        <label class="form-label fw-bold text-uppercase" for="suggestion-text">
                            Suggesion
                        </label>
                        <div class="input-description">
                            Tell us what you want in street fighter VI
                        </div>
                        <InputText class="form-control" style="border:groove" id="suggestion-text" @bind-Value="suggestion.Suggestion" />
                    </div>
                    <div class="input-section">
                        <label class="form-label fw-bold text-uppercase" for="category">Category</label>
                        <div class="input-description">Choose one category</div>
                        <div class="col-lg-8">
                            <MyInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                                @foreach (var option in categories)
                                    {
                                    <div class="radio-item-group">
                                        <InputRadio Value="@option.Id" id="@option.Id" />
                                        <label for="@option.Id">@option.CategoryName-@option.CategoryDescription</label>

                                    </div>

                                    }

                            </MyInputRadioGroup>
                        </div>

                    </div>

                    <div class="input-section">
                        <label class="form-label fw-bold text-uppercase" for="description">Description</label>
                        <div class="input-description">
                            Describe your suggestion
                        </div>
                        <InputTextArea id="description" @bind-Value="suggestion.Description" />
                    </div>
                    <div class="center-children">
                        <button class="btn btn-main btn-lg text-uppercase" type="submit" @onclick="CreateSuggestion">
                            Suggest
                        </button>
                    </div>
                </EditForm>

            }
        </div>
        

    </div>
</div>









@code {

    //to fetch suggestion data from UI and apply annotations on it
    private SuggestionModelAnnotations suggestion = new SuggestionModelAnnotations();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;



    protected async override Task OnInitializedAsync()
    {
        //get all categories
        categories = await categoryData.GetAllCategories();

        //var authState = await authProvider.GetAuthenticationStateAsync();
        //string objectId=authState.User.Claims.FirstOrDefault(x => x.Type.Contains("objectidentifier"))?.Value;
        //loggedInUser = await userData.GetUserFromAuthentication(objectId);

        loggedInUser=await authProvider.GetUserFromAuth(userData);

    }



    private async Task CreateSuggestion()
    {
        SuggestionModel s = new SuggestionModel();
        //need a new SuggestionsModel for dataAnnotations
        s.Suggestion = suggestion.Suggestion;
        s.Description = suggestion.Description;
        s.Author = new BasicUserModel(loggedInUser);
        s.Category = categories.Where(x => x.Id == suggestion.CategoryId).FirstOrDefault();

        if (s.Category is null)
        {
            suggestion.CategoryId = "";
            return;

        }

        await suggestionData.CreateSuggestion(s);

    }



    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }



}
