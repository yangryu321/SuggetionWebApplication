@page "/AdminApproval"
@attribute [Authorize(Policy = "Admin")]
@using SuggestionAppLibrary.DataAccess
@using SuggestionAppLibrary.Models

@inject ISuggestionData suggestionData
@inject NavigationManager navManager



<h1 class="mb-4 mt-lg-5 justify-content-center">
    Pending suggestions
</h1>

<div class="row">
    <div class="suggestion-count col-8 mt-2 ">
        @submissions.Count submissions
    </div>
    @*<div class="col-4 close-buttton-section">
        <button type="button" class="close" aria-label="Close" @onclick="ClosePage">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>*@
</div>


@if (submissions is not null)
{

    @foreach (var s in submissions)
    {
        <div class="row submission">
            <div class="col-lg-2 col-md-3 col-sm-4">
                <button class="btn btn-approve" @onclick="(()=>ApproveSuggestion(s))">Approve</button>
                <button class="btn btn-reject" @onclick="(()=>RejectSuggestion(s))">Reject</button>
            </div>

            <div class="col-lg-10 col-md-9 col-sm-8">
                <div>
                    @if (OkToEditSuggest == s.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@OkToEditSuggest" OnSubmit="(()=>SaveSuggestion(s))">
                            <InputText class="form-control approval-edit-field" @bind-Value="CurrentEditedSuggesion" />
                            <div>
                                <button class="btn" type="submit">
                                    <span class="oi oi-check submission-eidt-aprove"></span>
                                </button>
                            </div>
                            <div>
                                <button class="btn" type="button" @onclick="(()=>OkToEditSuggest=string.Empty)">
                                    <span class="oi oi-x submission-edit-reject"></span>
                                </button>
                            </div>
                        </EditForm>

                    }
                    else
                    {
                        @s.Suggestion
                        <span class="oi oi-pencil submission-edit-icon" @onclick="(()=>EditSuggestion(s))"></span>
                    }

                </div>

                <div>
                    @s.Category.CategoryName
                </div>
                <div>
                    @s.Author.DisplayName
                </div>
                <div>
                    @if (OkToEditDescription == s.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@OkToEditDescription" OnSubmit="(()=>SaveDescription(s))">
                            <InputTextArea class="form-control approval-edit-field" @bind-Value="CurrentEditedDescription" />
                            <div>
                                <button class="btn" type="submit">
                                    <span class="oi oi-check submission-eidt-aprove"></span>
                                </button>
                            </div>
                            <div>
                                <button class="btn" type="button" @onclick="(()=>OkToEditDescription=string.Empty)">
                                    <span class="oi oi-x submission-edit-reject"></span>
                                </button>
                            </div>
                        </EditForm>

                    }
                    else
                    {
                        @s.Description
                        <span class="oi oi-pencil submission-edit-icon" @onclick="(()=>EditDescription(s))"></span>
                    }
                </div>
            </div>
        </div>
    }


}











@code {

    private List<SuggestionModel> submissions = new List<SuggestionModel>();
    private SuggestionModel editingModel = new SuggestionModel();

    private string OkToEditDescription = "";
    private string OkToEditSuggest = "";

    private string CurrentEditedSuggesion = "";
    private string CurrentEditedDescription = "";


    protected async override Task OnInitializedAsync()
    {
        submissions = await suggestionData.GetAllSuggestionsWaitingForApproval();

    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }


    private async Task ApproveSuggestion(SuggestionModel suggestion)
    {
        suggestion.ApprovedForRelease = true;
        submissions.Remove(suggestion);
        await suggestionData.UpdateSuggestion(suggestion);

    }

    private async Task RejectSuggestion(SuggestionModel suggestion)
    {
        suggestion.Rejected = true;
        submissions.Remove(suggestion);
        await suggestionData.UpdateSuggestion(suggestion);

    }

    private void EditDescription(SuggestionModel suggestion)
    {
        OkToEditDescription = suggestion.Id;
        CurrentEditedDescription = suggestion.Description;

    }



    private async Task SaveDescription(SuggestionModel suggestion)
    {
        // suggestion.Description = editedDescription;

        suggestion.Description = CurrentEditedDescription;
        OkToEditDescription = "";
        await suggestionData.UpdateSuggestion(suggestion);

    }



    private void EditSuggestion(SuggestionModel suggestion)
    {
        OkToEditSuggest = suggestion.Id;
        CurrentEditedSuggesion = suggestion.Suggestion;


    }

    private async Task SaveSuggestion(SuggestionModel suggestion)
    {
        // suggestion.Suggestion = editedSuggestion;
        suggestion.Suggestion = CurrentEditedSuggesion;
        OkToEditSuggest = string.Empty;
        await suggestionData.UpdateSuggestion(suggestion);
    }


}
