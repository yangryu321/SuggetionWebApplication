@page "/Details/{Id}"
@using SuggestionAppLibrary.DataAccess
@using SuggestionAppLibrary.Models
@using SuggestionWebApplication.Helpers

@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider



<h1>
    Suggestion Details
</h1>

<div>
    @if (suggestion is not null)
    {
        <div>

            <div>
                @suggestion.DateCreated.ToString("MM.dd.yyyy")

            </div>

            <div>
                @suggestion.Suggestion
            </div>
            <div>
                @suggestion.Category.CategoryName
            </div>
            <div>
                @suggestion.Author.DisplayName
            </div>
            <div>
                @suggestion.Description
            </div>
            <div>
                @((MarkupString)suggestion.OwnerNotes)
            </div>
            <div>
                @if (suggestion.SuggestionStatus is not null)
                {
                    @suggestion.SuggestionStatus.StatusName
                }
            </div>
            <div @onclick="(()=>Upvote(suggestion))">
                <div>@GetupVoteTopText(suggestion)</div>
                <span class="oi oi-caret-top"></span>
                <div>@GetupVoteBottomText(suggestion)</div>
            </div>
            <button @onclick="ClosePage">
            </button>
        </div>

    }
</div>




@code {

    private UserModel loggedInUser;

    private SuggestionModel suggestion;

    [Parameter]
    public string Id { get; set; }


    protected async override Task OnInitializedAsync()
    {
        suggestion = await suggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }


    //bind to upvote text above
    private string GetupVoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click to";
            }
        }
    }

    //bind to upvote text below
    private string GetupVoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }


    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task Upvote(SuggestionModel suggestion)
    {
        //suggestion.UserVotes.Add(loggedInUser.Id);
        //await suggestionData.UpdateSuggestion(suggestion);

        //loggedInUser.VotedOnSuggestions.Add(new BasicSuggestionModel(suggestion));
        //await userData.UpdateUser(loggedInUser);

        if (!string.IsNullOrEmpty(loggedInUser.Id))
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return;
                //suggestion.NumberOfVotes = (await suggestionData.GetSuggestion(suggestion.Id)).UserVotes.Count;
            }

            //Update suggesiton locally, has nothting to do with database
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpVoteSuggestions(suggestion.Id, loggedInUser.Id);
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

}