@page "/Details/{Id}"
@using SuggestionAppLibrary.DataAccess
@using SuggestionAppLibrary.Models
@using SuggestionWebApplication.Helpers

@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider




<div class="mt-lg-5 row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        <div class="close-button-section">
            <button type="button" class="close" aria-label="Close" @onclick="ClosePage">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div>
            @if (suggestion is not null)
            {
                <div class="row suggestion-detail-row ">
                    <label>
                        Suggestion Details
                    </label>
                    <div class="col-11 suggestion-detail">
                        <div class="@GetVoteClass()" @onclick="(()=>Upvote(suggestion))">
                            <div class="text-uppercase">@GetupVoteTopText(suggestion)</div>
                            <span class="oi oi-caret-top entry-upvote"></span>
                            <div class="text-uppercase">@GetupVoteBottomText(suggestion)</div>
                        </div>
                       
                    </div>

                    <div class="suggesiton-detail-text">
                        <div class="suggestion-detail-date">
                            @suggestion.DateCreated.ToString("MM.dd.yyyy")

                        </div>
                        <div class="font-weight-bold mb-2 suggestion-detail-suggestion">
                            @suggestion.Suggestion
                        </div>
                        <div class="suggestion-btn-entry-text-category">
                            @suggestion.Category.CategoryName
                        </div>
                        <div class="mb-2 suggestion-detail-author">
                            @suggestion.Author.DisplayName
                        </div>
                        <div class="mb-2">
                            @suggestion.Description
                        </div>

                    </div>

                </div>


            }



        </div>

    </div>

</div>

@if (suggestion?.SuggestionStatus is not null)
{

    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-lg-10 suggestion-results form-layout">
            <div class="@GetSuggestionStatusClass()"></div>
            <div class="suggestion-detail-status-section">
                <div class="suggestion-detail-status fw-fold mb-2 suggestion-detail-suggestion">
                    @suggestion.SuggestionStatus.StatusName
                </div>
                <div class="suggesiton-detail-owner-notes">
                    @((MarkupString)suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>

}




@code {

    private UserModel loggedInUser = new UserModel();

    private SuggestionModel suggestion;

    [Parameter]
    public string Id { get; set; }


    protected async override Task OnInitializedAsync()
    {
        suggestion = await suggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }


    //bind to upvote text above
    private string GetupVoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (loggedInUser is not null)
            {
                if (suggestion.Author.Id == loggedInUser.Id)
                {
                    return "Awaiting";
                }
                else
                {
                    return "Click to";
                }
            }
            else
            {
                return "Click to";
            }
        }
    }

    //bind to upvote text below
    private string GetupVoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }


    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task Upvote(SuggestionModel suggestion)
    {
        //suggestion.UserVotes.Add(loggedInUser.Id);
        //await suggestionData.UpdateSuggestion(suggestion);

        //loggedInUser.VotedOnSuggestions.Add(new BasicSuggestionModel(suggestion));
        //await userData.UpdateUser(loggedInUser);

        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return;
                //suggestion.NumberOfVotes = (await suggestionData.GetSuggestion(suggestion.Id)).UserVotes.Count;
            }

            //Update suggesiton locally, has nothting to do with database
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpVoteSuggestions(suggestion.Id, loggedInUser.Id);
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }


    private string GetVoteClass()
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-detail-no-votes";

        }

        if (suggestion.UserVotes.Contains(loggedInUser.Id))
        {
            return "suggestion-detail-voted";
        }
        else
        {
            return "suggestion-detail-not-voted";
        }


    }

    private string GetSuggestionStatusClass()
    {
        if (suggestion is null || suggestion.SuggestionStatus is null)
            return "suggestion-detail-status-none";


        string output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-detail-status-completed",
            "Watching" => "suggestion-detail-status-watching",
            "Upcoming" => "suggestion-detail-status-upcoming",
            "Dismissed" => "suggestion-detail-status-dismissed",
            _ => "suggestion-detail-status-none",

        };

        return output;


    }

}